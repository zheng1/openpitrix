// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OpenpitrixClusterRole openpitrix cluster role
// swagger:model openpitrixClusterRole
type OpenpitrixClusterRole struct {

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`

	// cpu
	CPU *ProtobufUint32Value `json:"cpu,omitempty"`

	// env
	Env string `json:"env,omitempty"`

	// file system
	FileSystem string `json:"file_system,omitempty"`

	// gpu
	Gpu *ProtobufUint32Value `json:"gpu,omitempty"`

	// instance size
	InstanceSize *ProtobufUint32Value `json:"instance_size,omitempty"`

	// memory
	Memory *ProtobufUint32Value `json:"memory,omitempty"`

	// mount options
	MountOptions string `json:"mount_options,omitempty"`

	// mount point
	MountPoint string `json:"mount_point,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// storage size
	StorageSize *ProtobufUint32Value `json:"storage_size,omitempty"`
}

// Validate validates this openpitrix cluster role
func (m *OpenpitrixClusterRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenpitrixClusterRole) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterRole) validateGpu(formats strfmt.Registry) error {

	if swag.IsZero(m.Gpu) { // not required
		return nil
	}

	if m.Gpu != nil {
		if err := m.Gpu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpu")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterRole) validateInstanceSize(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceSize) { // not required
		return nil
	}

	if m.InstanceSize != nil {
		if err := m.InstanceSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_size")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterRole) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterRole) validateStorageSize(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageSize) { // not required
		return nil
	}

	if m.StorageSize != nil {
		if err := m.StorageSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_size")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenpitrixClusterRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenpitrixClusterRole) UnmarshalBinary(b []byte) error {
	var res OpenpitrixClusterRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
