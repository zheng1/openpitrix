// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenpitrixSubnet openpitrix subnet
// swagger:model openpitrixSubnet
type OpenpitrixSubnet struct {

	// create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// instance id
	InstanceID []string `json:"instance_id"`

	// name
	Name string `json:"name,omitempty"`

	// subnet id
	SubnetID string `json:"subnet_id,omitempty"`

	// subnet type
	SubnetType *ProtobufUint32Value `json:"subnet_type,omitempty"`

	// vpc id
	VpcID string `json:"vpc_id,omitempty"`
}

// Validate validates this openpitrix subnet
func (m *OpenpitrixSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenpitrixSubnet) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenpitrixSubnet) validateSubnetType(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetType) { // not required
		return nil
	}

	if m.SubnetType != nil {
		if err := m.SubnetType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenpitrixSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenpitrixSubnet) UnmarshalBinary(b []byte) error {
	var res OpenpitrixSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
